defmodule Morse do
  @morse %{
    " " => "......",
    "." => ".=.=.=",
    "," => "==..==",
    "?" => "..==..",
    "'" => ".====.",
    "!" => "=.=.==",
    "/" => "=..=.",
    "(" => "=.==.",
    ")" => "=.==.=",
    "&" => ".=...",
    ":" => "===...",
    ";" => "=.=.=.",
    "=" => "=...=",
    "+" => ".=.=.",
    "=" => "=....=",
    "_" => "..==.=",
    "\"" => ".=..=.",
    "$" => "...=..=",
    "@" => ".==.=.",

    "0" => "=====",
    "1" => ".====",
    "2" => "..===",
    "3" => "...==",
    "4" => "....=",
    "5" => ".....",
    "6" => "=....",
    "7" => "==...",
    "8" => "===..",
    "9" => "====.",

    "A" => ".=",
    "B" => "=...",
    "C" => "=.=.",
    "D" => "=..",
    "E" => ".",
    "F" => "..=.",
    "G" => "==.",
    "H" => "....",
    "I" => "..",
    "J" => ".===",
    "K" => "=.=",
    "L" => ".=..",
    "M" => "==",
    "N" => "=.",
    "O" => "===",
    "P" => ".==.",
    "Q" => "==.=",
    "R" => ".=.",
    "S" => "...",
    "T" => "=",
    "U" => "..=",
    "V" => "...=",
    "W" => ".==",
    "X" => "=..=",
    "Y" => "=.==",
    "Z" => "==..",

    "À" => ".==.=",
    "Ä" => ".=.=",
    "Å" => ".==.=",
    "Ą" => ".=.=",
    "Æ" => ".=.=",
    "Ć" => "=.=..",
    "Ĉ" => "=.=..",
    "Ç" => "=.=..",
    "Đ" => "..=..",
    "Ð" => "..==.",
    "É" => "..=..",
    "È" => ".=..=",
    "Ę" => "..=..",
    "Ĝ" => "==.=.",
    "Ĥ" => "====",
    "Ĵ" => ".===.",
    "Ł" => ".=..=",
    "Ń" => "==.==",
    "Ñ" => "==.==",
    "Ó" => "===.",
    "Ö" => "===.",
    "Ø" => "===.",
    "Ś" => "...=...",
    "Ŝ" => "...=.",
    "Š" => "====",
    "Þ" => ".==..",
    "Ü" => "..==",
    "Ŭ" => "..==",
    "Ź" => "==..=.",
    "Ż" => "==..="
  }

  @doc """
  ## Examples
      iex> Morse.encode("This is a doctest")
      "= .... .. ... ...... .. ... ...... .= ...... =.. === =.=. = . ... ="
  """
  def encode(string) do
    string
    |> String.codepoints()
    |> Enum.map(&to_morse/1)
    |> Enum.join(" ")
  end

  @doc """
  ## Examples
      iex> Morse.encode("= .... .. ... ...... .. ... ...... .= ...... =.. === =.=. = . ... =")
      "THIS IS A DOCTEST"
  """
  def decode(string) do
    string
    |> String.split(" ")
    |> Enum.map(&from_morse/1)
    |> Enum.join()
  end

  for {ascii, morse} <- @morse do
    downcase = String.downcase(ascii)
    def to_morse(unquote(ascii)), do: unquote(morse)
    def to_morse(unquote(downcase)), do: unquote(morse)

    def from_morse(unquote(morse)), do: unquote(ascii)
  end
end
